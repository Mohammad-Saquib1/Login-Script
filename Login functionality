# Import the Selenium WebDriver and Exceptions modules
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

# Create a WebDriver instance (in this case, for Chrome)
driver = webdriver.Chrome(executable_path='path/to/chromedriver')

# Navigate to the web application's login page
driver.get('https://example.com/login')

try:
    # Find the username input field by its HTML id attribute and enter a valid username
    username_input = driver.find_element_by_id('username')
    username_input.send_keys('your_username')

    # Find the password input field by its HTML id attribute and enter a valid password
    password_input = driver.find_element_by_id('password')
    password_input.send_keys('your_password')

    # Find the login button by its HTML id attribute and click it
    login_button = driver.find_element_by_id('login-button')
    login_button.click()

    # Check if the login was successful by looking for a specific element on the next page
    welcome_message = driver.find_element_by_css_selector('.welcome-message')
    
    # If the welcome message is found, the login was successful
    if welcome_message.is_displayed():
        print("Login Successful!")
    else:
        print("Login Failed!")

except NoSuchElementException as e:
    print(f"Element not found: {e}")
finally:
    # Close the browser window
    driver.quit()



Here's an explanation of each step in the code:

Import necessary modules from Selenium, including webdriver for browser automation and NoSuchElementException for error handling.

Create a WebDriver instance for the Chrome browser. Replace 'path/to/chromedriver' with the actual path to your ChromeDriver executable.

Navigate to the login page of the sample web application by using the get method and providing the URL.

Use try and except blocks to handle any exceptions that may occur during the automation process.

Find the username input field by its HTML id attribute and enter a valid username using send_keys.

Find the password input field by its HTML id attribute and enter a valid password using send_keys.

Locate the login button by its HTML id attribute and click it.

Check if the login was successful by searching for a specific element (in this case, a welcome message) on the next page.

If the welcome message is found, print "Login Successful!"; otherwise, print "Login Failed!"

In the finally block, close the browser window using driver.quit() to ensure that the browser session is properly terminated.







